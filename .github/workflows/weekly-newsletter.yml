name: Developer Tools Newsletter (Every Other Day)

on:
  # Run every other day at 10 AM UTC (Monday, Wednesday, Friday, Sunday)
  schedule:
    - cron: '0 10 * * 1,3,5,0'
  
  # Allow manual trigger for testing
  workflow_dispatch:

# Grant necessary permissions for the workflow
permissions:
  contents: write      # Required to push commits
  issues: write        # Required to create GitHub issues
  pull-requests: read  # For repository access

jobs:
  generate-newsletter:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        pip install openai || echo "OpenAI package installation failed, continuing with fallback"
        
    - name: Generate newsletter
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
      run: |
        echo "Starting newsletter generation..."
        python3 automation/simple_automation.py || python automation/simple_automation.py
        echo "Newsletter generation completed"
        ls -la newsletter/ || echo "Newsletter directory not found"
        
    - name: Commit and push newsletter
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Configuring git..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        echo "Checking for newsletter files..."
        ls -la newsletter/ || echo "Newsletter directory not found"
        
        echo "Adding newsletter files..."
        git add newsletter/ || echo "No newsletter files to add"
        
        echo "Checking git status..."
        git status
        
        echo "Attempting to commit..."
        if git diff --staged --quiet; then
          echo "✅ No newsletter changes this week - content already up to date"
        else
          echo "📝 Committing new newsletter content..."
          git commit -m "Auto-generated newsletter - $(date +%Y-%m-%d)"
          echo "📤 Pushing changes to repository..."
          if git push; then
            echo "✅ Successfully pushed newsletter update!"
          else
            echo "❌ Failed to push changes. Check repository permissions."
            exit 1
          fi
        fi
        
    - name: Create Issue with Newsletter Content
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            console.log('Starting newsletter issue creation...');
            
            if (!fs.existsSync('newsletter')) {
              console.log('Newsletter directory does not exist');
              return;
            }

            const newsletterDir = 'newsletter';
            const files = fs.readdirSync(newsletterDir)
              .filter(file => file.startsWith('auto-generated-week-'))
              .sort()
              .reverse();

            if (files.length === 0) {
              console.log('No newsletter files found');
              return;
            }

            const latestFile = files[0];
            console.log('Found latest newsletter file:', latestFile);
            
            const newsletterContent = fs.readFileSync(path.join(newsletterDir, latestFile), 'utf8');
            console.log('Newsletter content loaded, length:', newsletterContent.length);

            const currentDate = new Date().toISOString().slice(0, 10);
            const issueTitle = 'Newsletter Ready - ' + currentDate;
            
            
            const templatePath = path.join('.github', 'ISSUE_TEMPLATE', 'newsletter_ready.md');
            let issueBody = fs.readFileSync(templatePath, 'utf8');

            issueBody = issueBody
              .replace('{{newsletter_content}}', newsletterContent)
              .replace('{{file}}', latestFile);
            console.log('Creating GitHub issue...');
            
            const response = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['newsletter', 'automation', 'ready-to-send']
            });
            
            console.log('Issue created successfully:', response.data.html_url);

          } catch (error) {
            console.error('Error in newsletter automation:', error.message);
            console.error('Full error:', error);
            
            const errorDate = new Date().toISOString();
            const errorTitle = 'Newsletter Automation Error - ' + errorDate.slice(0, 10);
            
            const errorBodyParts = [
              '## Newsletter Automation Encountered an Error',
              '',
              '**Error Details:**',
              '```',
              error.message,
              '```',
              '',
              '**Time:** ' + errorDate,
              '',
              '**Next Steps:**',
              '1. Check the GitHub Actions logs for more details',
              '2. Manually run the automation script if needed',
              '3. Contact support if the issue persists',
              '',
              'This error issue was automatically created by the newsletter automation system.'
            ];
            
            const errorBody = errorBodyParts.join('\n');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: errorTitle,
              body: errorBody,
              labels: ['bug', 'automation', 'needs-attention']
            });
          }